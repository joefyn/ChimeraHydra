name: chimera-gate

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]
  push:
    branches-ignore: [main]         # run on PR branches when you push

permissions:
  contents: read
  pull-requests: read
  issues: read
  statuses: write

jobs:
  gate:
    runs-on: ubuntu-latest
    steps:
      # Not strictly needed, but harmless and keeps logs familiar
      - uses: actions/checkout@v4

      # Resolve PR number + correct head SHA for both PR and push events
      - name: Resolve PR context
        id: resolve
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            let prNumber = null;
            let sha = null;

            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
              sha = context.payload.pull_request.head.sha;
              core.info(`event=pull_request pr=#${prNumber} sha=${sha}`);
            } else if (context.eventName === 'push') {
              const branch = context.ref.replace('refs/heads/', '');
              const { data: prs } = await github.rest.pulls.list({
                owner, repo, state: 'open', head: `${owner}:${branch}`
              });
              if (!prs.length) {
                core.setFailed(`No open PR found for branch '${branch}'.`);
                return;
              }
              prNumber = prs[0].number;
              sha = context.sha; // current pushed commit
              core.info(`event=push branch=${branch} -> pr=#${prNumber} sha=${sha}`);
            } else {
              core.setFailed(`Unsupported trigger: ${context.eventName}`);
              return;
            }

            core.setOutput('pr',  String(prNumber));
            core.setOutput('sha', sha);

      # Post pending immediately to the correct commit
      - name: gate → pending
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              sha:   '${{ steps.resolve.outputs.sha }}',
              state: 'pending',
              context: 'gate',
              description: 'gate running'
            });

      # Pass only if the PR has label "ok-to-merge"
      - name: require label ok-to-merge
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = Number('${{ steps.resolve.outputs.pr }}');
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: pr
            });
            const hasOk = labels.some(l => (l.name || '').toLowerCase() === 'ok-to-merge');
            core.info(`ok-to-merge label present: ${hasOk}`);
            if (!hasOk) core.setFailed("Gate FAIL: add label 'ok-to-merge' to pass.");

      # Always conclude with success/failure on the same commit
      - name: gate → conclude
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ok = "${{ job.status }}" === "success";
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              sha:   '${{ steps.resolve.outputs.sha }}',
              state: ok ? 'success' : 'failure',
              context: 'gate',
              description: ok ? 'gate passed' : 'gate failed'
            });

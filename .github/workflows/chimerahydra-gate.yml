name: chimera-gate

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, ready_for_review ]

permissions:
  contents: read

concurrency:
  group: gate-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect docs-only changes
    runs-on: ubuntu-latest
    outputs:
      docs_only: ${{ steps.decide.outputs.docs_only }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Filter paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            docs:
              - '**/*.md'
              - 'docs/**'
              - 'LICENSE*'
              - '**/*.png'
              - '**/*.jpg'
              - '**/*.jpeg'
              - '**/*.svg'
              - '**/*.gif'
              - '**/*.webp'
              - '**/*.avif'
              - '**/*.pdf'
            other:
              - '**'
              - '!**/*.md'
              - '!docs/**'
              - '!LICENSE*'
              - '!**/*.png'
              - '!**/*.jpg'
              - '!**/*.jpeg'
              - '!**/*.svg'
              - '!**/*.gif'
              - '!**/*.webp'
              - '!**/*.avif'
              - '!**/*.pdf'

      - name: Decide docs-only
        id: decide
        run: |
          if [ "${{ steps.filter.outputs.docs }}" = "true" ] && [ "${{ steps.filter.outputs.other }}" != "true" ]; then
            echo "docs_only=true" >> "$GITHUB_OUTPUT"
          else
            echo "docs_only=false" >> "$GITHUB_OUTPUT"
          fi

  gate:
    name: Gate (syntax, lint, validate)
    needs: [ changes ]
    if: ${{ needs.changes.outputs.docs_only != 'true' && github.event.pull_request.draft == false }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install deps (pinned)
        run: |
          python -m pip install --upgrade pip
          pip install 'ruff==0.*' 'jsonschema==4.*'

      - name: Python syntax sanity
        run: python -m compileall -q .

      - name: Lint (ruff, check-only)
        run: ruff check --output-format=github

      - name: Validate artifacts (strict, fast)
        run: |
          python validate_artifacts.py \
            --schemas-dir schemas \
            --artifacts-dir artifacts \
            --dialect 2020-12 \
            --fail-on-invalid \
            --max-depth 2

  status:
    name: Write legacy status + Check Run
    needs: [ changes, gate ]
    if: ${{ always() && github.event.pull_request.draft == false }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      statuses: write
      checks: write
    steps:
      - name: Conclude status
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const docsOnly = '${{ needs.changes.outputs.docs_only }}' === 'true';
            const sha = context.payload.pull_request.head.sha;
            const gateResult = '${{ needs.gate.result }}'; // success | failure | cancelled | skipped

            let state, conclusion, description;

            if (docsOnly) {
              state = 'success';
              conclusion = 'success';
              description = 'Docs-only change: gate bypassed';
            } else if (gateResult === 'success') {
              state = 'success';
              conclusion = 'success';
              description = 'Gate passed';
            } else if (gateResult === 'cancelled') {
              state = 'failure';
              conclusion = 'failure';
              description = 'Gate cancelled (treated as failure)';
            } else if (gateResult === 'skipped') {
              state = 'failure';
              conclusion = 'failure';
              description = 'Gate skipped (treated as failure)';
            } else {
              state = 'failure';
              conclusion = 'failure';
              description = 'Gate failed';
            }

            // Legacy status (required by branch protection)
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha,
              state,
              context: 'chimera-gate / gate',
              description
            });

            // Pretty Check Run
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Chimera Gate',
              head_sha: sha,
              status: 'completed',
              conclusion,
              external_id: `chimera:${{ github.run_id }}`,
              details_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
              output: {
                title: 'Chimera Gate',
                summary: description
              }
            });

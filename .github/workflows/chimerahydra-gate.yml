name: chimera-gate

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]
  push:
    branches-ignore: [main]   # run on PR branches when you push

permissions:
  contents: read
  pull-requests: read
  issues: read
  checks: write               # <-- key: we’re creating a CHECK RUN

jobs:
  gate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Resolve PR and head SHA (works for PR + push)
        id: resolve
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            let prNumber = null;
            let sha = null;

            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
              sha = context.payload.pull_request.head.sha;
            } else if (context.eventName === 'push') {
              const branch = context.ref.replace('refs/heads/', '');
              const prs = (await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${branch}` })).data;
              if (!prs.length) core.setFailed(`No open PR for branch '${branch}'.`);
              prNumber = prs[0].number;
              sha = context.sha;
            } else {
              core.setFailed(`Unsupported trigger: ${context.eventName}`);
            }

            core.setOutput('pr',  String(prNumber));
            core.setOutput('sha', sha);

      - name: gate (check-run) → in_progress
        id: start
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const res = await github.rest.checks.create({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              name:  'gate',                                 // must match the required check
              head_sha: '${{ steps.resolve.outputs.sha }}',
              status: 'in_progress'
            });
            core.setOutput('id', String(res.data.id));

      - name: require label ok-to-merge
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = Number('${{ steps.resolve.outputs.pr }}');
            const labels = (await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: pr
            })).data;
            const hasOk = labels.some(l => (l.name || '').toLowerCase() === 'ok-to-merge');
            core.info(`ok-to-merge label: ${hasOk}`);
            if (!hasOk) core.setFailed("Gate FAIL: add label 'ok-to-merge'.");

      - name: gate (check-run) → complete
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ok = "${{ job.status }}" === "success";
            await github.rest.checks.update({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              check_run_id: Number('${{ steps.start.outputs.id }}'),
              status: 'completed',
              conclusion: ok ? 'success' : 'failure',
              completed_at: new Date().toISOString(),
              output: {
                title: 'chimera gate',
                summary: ok ? 'gate passed' : 'gate failed'
              }
            });

